// <auto-generated />
using System;
using Card.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Card.Database.Migrations
{
    [DbContext(typeof(CardContext))]
    [Migration("20190127140255_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Card.Domain.Entities.BuyerAggregate.Buyer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Buyers");
                });

            modelBuilder.Entity("Card.Domain.Entities.CardAggregate.OrderCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("OrderCardValue")
                        .HasColumnName("CardValue")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<Guid?>("RelatedOrderId");

                    b.HasKey("Id");

                    b.HasIndex("RelatedOrderId");

                    b.ToTable("Card");
                });

            modelBuilder.Entity("Card.Domain.Entities.CardAggregate.OrderCardItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CardPercentage")
                        .HasColumnName("CardPercentage")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal>("CardValue")
                        .HasColumnName("CardValue")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<Guid?>("OrderCardId");

                    b.Property<Guid?>("RelatedOrderItemId");

                    b.HasKey("Id");

                    b.HasIndex("OrderCardId");

                    b.HasIndex("RelatedOrderItemId");

                    b.ToTable("OrderCardItem");
                });

            modelBuilder.Entity("Card.Domain.Entities.Disk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description")
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Genre")
                        .HasColumnName("Genre")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("varchar(200)");

                    b.Property<decimal>("Price");

                    b.HasKey("Id");

                    b.ToTable("Disks");
                });

            modelBuilder.Entity("Card.Domain.Entities.OrderAggregate.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BuyerId");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnName("OrderDate")
                        .HasColumnType("Datetime");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Card.Domain.Entities.OrderAggregate.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrderId");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnName("UnitPrice")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal>("Units")
                        .HasColumnName("Unit")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("Card.Domain.Entities.CardAggregate.OrderCard", b =>
                {
                    b.HasOne("Card.Domain.Entities.OrderAggregate.Order", "RelatedOrder")
                        .WithMany()
                        .HasForeignKey("RelatedOrderId");
                });

            modelBuilder.Entity("Card.Domain.Entities.CardAggregate.OrderCardItem", b =>
                {
                    b.HasOne("Card.Domain.Entities.CardAggregate.OrderCard")
                        .WithMany("OrderCardtems")
                        .HasForeignKey("OrderCardId");

                    b.HasOne("Card.Domain.Entities.OrderAggregate.OrderItem", "RelatedOrderItem")
                        .WithMany()
                        .HasForeignKey("RelatedOrderItemId");
                });

            modelBuilder.Entity("Card.Domain.Entities.OrderAggregate.Order", b =>
                {
                    b.HasOne("Card.Domain.Entities.BuyerAggregate.Buyer", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId");
                });

            modelBuilder.Entity("Card.Domain.Entities.OrderAggregate.OrderItem", b =>
                {
                    b.HasOne("Card.Domain.Entities.OrderAggregate.Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId");

                    b.OwnsOne("Card.Domain.Entities.OrderAggregate.OrderedDisk", "OrderedDisk", b1 =>
                        {
                            b1.Property<Guid?>("OrderItemId");

                            b1.Property<Guid>("DiskId")
                                .HasColumnName("DiskID");

                            b1.Property<int>("Genre")
                                .HasColumnName("DiskGenre");

                            b1.Property<string>("Name")
                                .HasColumnName("DiskName");

                            b1.ToTable("OrderItem");

                            b1.HasOne("Card.Domain.Entities.OrderAggregate.OrderItem")
                                .WithOne("OrderedDisk")
                                .HasForeignKey("Card.Domain.Entities.OrderAggregate.OrderedDisk", "OrderItemId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
